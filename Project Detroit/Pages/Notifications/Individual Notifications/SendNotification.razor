@page "/Notifications/SendNotification/Individual/{Id:guid}"
@using Project.Detroit.Models
@using Project.Detroit.Services
@inject GroupService groupService
@inject NotificationService _NotificationService
@inject NavigationManager _navigationManager
@inject ISnackbar Snackbar

<PageTitle>Project Detroit: Send Notification</PageTitle>

<MudPaper Class="pa-8 ma-5 mt-2" Elevation="3">
    <MudText Class="mb-2"><h1><strong>Send notification to a group</strong></h1></MudText>
    <MudCard Elevation="2" Class="mt-4 pa-4">
        <MudTextField @bind-Value="@_notification.NotificationName" Clearable="true" Label="Notification Name" Margin="Margin.Dense" />
        <MudTextField @bind-Value="@_notification.Details" Clearable="true" Label="Details" Margin="Margin.Dense" />
        <MudCard Elevation="2" Class="mt-4 mb-4 pa-4">
            <select class="form-control" @bind="selectedGroupId">
                @if (groups == null)
                {
                    <MudProgressLinear Color="Color.Error" Indeterminate="true" Class="my-7" />
                }
                else
                {
                    <option value="">-- Select Group --</option>
                    @foreach (var group in groups)
                    {
                        <option value="@group.Id">@group.GroupName</option>
                    }
                }
            </select>
        </MudCard>
    </MudCard>
    <MudButton Class="mt-4 mr-4" OnClick="SendNotificationToGroup" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Send" Color="Color.Success">SEND NOTIFICATION</MudButton>
    <MudButton Class="mt-4 mr-4" OnClick="Cancel" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Default">CANCEL</MudButton>
</MudPaper>

@code {
    [Parameter] public Guid Id { get; set; }

    //Create a new notification
    Notification? _notification = new Notification()
        {
            Id = Guid.NewGuid()
        };

    //Section for group-related variables
    List<Group> groups;
    Guid? selectedGroupId;

    protected override async Task OnInitializedAsync()
    {
        groups = await groupService.getAllGroupsAsync();
    }

    //Send operation
    protected async void SendNotificationToGroup()
    {
        try{
            // Perform null check for selectedGroupId before assigning it to _notification.GroupID
            _notification.GroupID = selectedGroupId.Value;
            await _NotificationService.CreateNotification(_notification);
            _navigationManager.NavigateTo($"/Notifications/individualNotifications/{Id}");
            Snackbar.Add("Operation successfully completed", Severity.Success);
        } catch (Exception ex)
        {
            Snackbar.Add("Incorrect information cannot be added. Please review what you have entered.", Severity.Error);
        }
    }

    //Cancel operation
    void Cancel()
    {
        _navigationManager.NavigateTo($"/Notifications/individualNotifications/{Id}");
    }
}